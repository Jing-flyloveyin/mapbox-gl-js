{
  "$version": 8,
  "$root": {
    "version": {
      "required": true,
      "type": "enum",
      "values": [
        8
      ],
      "doc": "样式规范版本号。必须是8。",
      "example": 8
    },
    "name": {
      "type": "string",
      "doc": "样式的可读名称",
      "example": "Bright"
    },
    "metadata": {
      "type": "*",
      "doc": "Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."
    },
    "center": {
      "type": "array",
      "value": "number",
      "doc": "Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
      "example": [
        -73.9749,
        40.7736
      ]
    },
    "zoom": {
      "type": "number",
      "doc": "Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
      "example": 12.5
    },
    "bearing": {
      "type": "number",
      "default": 0,
      "period": 360,
      "units": "degrees",
      "doc": "Default bearing, in degrees. The bearing is the compass direction that is \"up\"; for example, a bearing of 90° orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
      "example": 29
    },
    "pitch": {
      "type": "number",
      "default": 0,
      "units": "degrees",
      "doc": "Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
      "example": 50
    },
    "light": {
      "type": "light",
      "doc": "The global light source.",
      "example": {
        "anchor": "viewport",
        "color": "white",
        "intensity": 0.4
      }
    },
    "sources": {
      "required": true,
      "type": "sources",
      "doc": "Data source specifications.",
      "example": {
        "mapbox-streets": {
          "type": "vector",
          "url": "mapbox://mapbox.mapbox-streets-v6"
        }
      }
    },
    "sprite": {
      "type": "string",
      "doc": "A base URL for retrieving the sprite image and metadata. The extensions `.png`, `.json` and scale factor `@2x.png` will be automatically appended. This property is required if any layer uses the `background-pattern`, `fill-pattern`, `line-pattern`, `fill-extrusion-pattern`, or `icon-image` properties.",
      "example": "mapbox://sprites/mapbox/bright-v8"
    },
    "glyphs": {
      "type": "string",
      "doc": "A URL template for loading signed-distance-field glyph sets in PBF format. The URL must include `{fontstack}` and `{range}` tokens. This property is required if any layer uses the `text-field` layout property.",
      "example": "mapbox://fonts/mapbox/{fontstack}/{range}.pbf"
    },
    "transition": {
      "type": "transition",
      "doc": "A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style's `transition` property.",
      "example": {
        "duration": 300,
        "delay": 0
      }
    },
    "layers": {
      "required": true,
      "type": "array",
      "value": "layer",
      "doc": "Layers will be drawn in the order of this array.",
      "example": [
        {
          "id": "water",
          "source": "mapbox-streets",
          "source-layer": "water",
          "type": "fill",
          "paint": {
            "fill-color": "#00ffff"
          }
        }
      ]
    }
  },
  "sources": {
    "*": {
      "type": "source",
      "doc": "Specification of a data source. For vector and raster sources, either TileJSON or a URL to a TileJSON must be provided. For image and video sources, a URL must be provided. For GeoJSON sources, a URL or inline GeoJSON must be provided."
    }
  },
  "source": [
    "source_vector",
    "source_raster",
    "source_raster_dem",
    "source_geojson",
    "source_video",
    "source_image"
  ],
  "source_vector": {
    "type": {
      "required": true,
      "type": "enum",
      "values": {
        "vector": {
          "doc": "A vector tile source."
        }
      },
      "doc": "The type of the source."
    },
    "url": {
      "type": "string",
      "doc": "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<mapid>`."
    },
    "tiles": {
      "type": "array",
      "value": "string",
      "doc": "An array of one or more tile source URLs, as in the TileJSON spec."
    },
    "bounds": {
      "type": "array",
      "value": "number",
      "length": 4,
      "default": [
        -180,
        -85.0511,
        180,
        85.0511
      ],
      "doc": "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
    },
    "scheme": {
      "type": "enum",
      "values": {
        "xyz": {
          "doc": "Slippy map tilenames scheme."
        },
        "tms": {
          "doc": "OSGeo spec scheme."
        }
      },
      "default": "xyz",
      "doc": "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
    },
    "minzoom": {
      "type": "number",
      "default": 0,
      "doc": "Minimum zoom level for which tiles are available, as in the TileJSON spec."
    },
    "maxzoom": {
      "type": "number",
      "default": 22,
      "doc": "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
    },
    "attribution": {
      "type": "string",
      "doc": "Contains an attribution to be displayed when the map is shown to a user."
    },
    "*": {
      "type": "*",
      "doc": "Other keys to configure the data source."
    }
  },
  "source_raster": {
    "type": {
      "required": true,
      "type": "enum",
      "values": {
        "raster": {
          "doc": "A raster tile source."
        }
      },
      "doc": "The type of the source."
    },
    "url": {
      "type": "string",
      "doc": "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<mapid>`."
    },
    "tiles": {
      "type": "array",
      "value": "string",
      "doc": "An array of one or more tile source URLs, as in the TileJSON spec."
    },
    "bounds": {
      "type": "array",
      "value": "number",
      "length": 4,
      "default": [
        -180,
        -85.0511,
        180,
        85.0511
      ],
      "doc": "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
    },
    "minzoom": {
      "type": "number",
      "default": 0,
      "doc": "Minimum zoom level for which tiles are available, as in the TileJSON spec."
    },
    "maxzoom": {
      "type": "number",
      "default": 22,
      "doc": "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
    },
    "tileSize": {
      "type": "number",
      "default": 512,
      "units": "pixels",
      "doc": "The minimum visual size to display tiles for this layer. Only configurable for raster layers."
    },
    "scheme": {
      "type": "enum",
      "values": {
        "xyz": {
          "doc": "Slippy map tilenames scheme."
        },
        "tms": {
          "doc": "OSGeo spec scheme."
        }
      },
      "default": "xyz",
      "doc": "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
    },
    "attribution": {
      "type": "string",
      "doc": "Contains an attribution to be displayed when the map is shown to a user."
    },
    "*": {
      "type": "*",
      "doc": "Other keys to configure the data source."
    }
  },
  "source_raster_dem": {
    "type": {
      "required": true,
      "type": "enum",
      "values": {
        "raster-dem": {
          "doc": "A RGB-encoded raster DEM source"
        }
      },
      "doc": "The type of the source."
    },
    "url": {
      "type": "string",
      "doc": "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<mapid>`."
    },
    "tiles": {
      "type": "array",
      "value": "string",
      "doc": "An array of one or more tile source URLs, as in the TileJSON spec."
    },
    "bounds": {
      "type": "array",
      "value": "number",
      "length": 4,
      "default": [
        -180,
        -85.0511,
        180,
        85.0511
      ],
      "doc": "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
    },
    "minzoom": {
      "type": "number",
      "default": 0,
      "doc": "Minimum zoom level for which tiles are available, as in the TileJSON spec."
    },
    "maxzoom": {
      "type": "number",
      "default": 22,
      "doc": "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
    },
    "tileSize": {
      "type": "number",
      "default": 512,
      "units": "pixels",
      "doc": "The minimum visual size to display tiles for this layer. Only configurable for raster layers."
    },
    "attribution": {
      "type": "string",
      "doc": "Contains an attribution to be displayed when the map is shown to a user."
    },
    "encoding": {
      "type": "enum",
      "values": {
        "terrarium": {
          "doc": "Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info."
        },
        "mapbox": {
          "doc": "Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info."
        }
      },
      "default": "mapbox",
      "doc": "The encoding used by this source. Mapbox Terrain RGB is used by default"
    },
    "*": {
      "type": "*",
      "doc": "Other keys to configure the data source."
    }
  },
  "source_geojson": {
    "type": {
      "required": true,
      "type": "enum",
      "values": {
        "geojson": {
          "doc": "A GeoJSON data source."
        }
      },
      "doc": "The data type of the GeoJSON source."
    },
    "data": {
      "type": "*",
      "doc": "A URL to a GeoJSON file, or inline GeoJSON."
    },
    "maxzoom": {
      "type": "number",
      "default": 18,
      "doc": "Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels)."
    },
    "attribution": {
      "type": "string",
      "doc": "Contains an attribution to be displayed when the map is shown to a user."
    },
    "buffer": {
      "type": "number",
      "default": 128,
      "maximum": 512,
      "minimum": 0,
      "doc": "Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance."
    },
    "tolerance": {
      "type": "number",
      "default": 0.375,
      "doc": "Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance)."
    },
    "cluster": {
      "type": "boolean",
      "default": false,
      "doc": "If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:\n * `cluster` Is `true` if the point is a cluster \n * `cluster_id` A unqiue id for the cluster to be used in conjunction with the [cluster inspection methods](https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)\n * `point_count` Number of original points grouped into this cluster\n * `point_count_abbreviated` An abbreviated point count"
    },
    "clusterRadius": {
      "type": "number",
      "default": 50,
      "minimum": 0,
      "doc": "Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile."
    },
    "clusterMaxZoom": {
      "type": "number",
      "doc": "Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered)."
    },
    "lineMetrics": {
      "type": "boolean",
      "default": false,
      "doc": "Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values."
    }
  },
  "source_video": {
    "type": {
      "required": true,
      "type": "enum",
      "values": {
        "video": {
          "doc": "A video data source."
        }
      },
      "doc": "The data type of the video source."
    },
    "urls": {
      "required": true,
      "type": "array",
      "value": "string",
      "doc": "URLs to video content in order of preferred format."
    },
    "coordinates": {
      "required": true,
      "doc": "Corners of video specified in longitude, latitude pairs.",
      "type": "array",
      "length": 4,
      "value": {
        "type": "array",
        "length": 2,
        "value": "number",
        "doc": "A single longitude, latitude pair."
      }
    }
  },
  "source_image": {
    "type": {
      "required": true,
      "type": "enum",
      "values": {
        "image": {
          "doc": "An image data source."
        }
      },
      "doc": "The data type of the image source."
    },
    "url": {
      "required": true,
      "type": "string",
      "doc": "URL that points to an image."
    },
    "coordinates": {
      "required": true,
      "doc": "Corners of image specified in longitude, latitude pairs.",
      "type": "array",
      "length": 4,
      "value": {
        "type": "array",
        "length": 2,
        "value": "number",
        "doc": "A single longitude, latitude pair."
      }
    }
  },
  "layer": {
    "id": {
      "type": "string",
      "doc": "Unique layer name.",
      "required": true
    },
    "type": {
      "type": "enum",
      "values": {
        "fill": {
          "doc": "A filled polygon with an optional stroked border.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.10.0",
              "android": "2.0.1",
              "ios": "2.0.0",
              "macos": "0.1.0"
            }
          }
        },
        "line": {
          "doc": "A stroked line.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.10.0",
              "android": "2.0.1",
              "ios": "2.0.0",
              "macos": "0.1.0"
            }
          }
        },
        "symbol": {
          "doc": "An icon or a text label.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.10.0",
              "android": "2.0.1",
              "ios": "2.0.0",
              "macos": "0.1.0"
            }
          }
        },
        "circle": {
          "doc": "A filled circle.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.10.0",
              "android": "2.0.1",
              "ios": "2.0.0",
              "macos": "0.1.0"
            }
          }
        },
        "heatmap": {
          "doc": "A heatmap.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.41.0",
              "android": "6.0.0",
              "ios": "4.0.0",
              "macos": "0.7.0"
            }
          }
        },
        "fill-extrusion": {
          "doc": "An extruded (3D) polygon.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.27.0",
              "android": "5.1.0",
              "ios": "3.6.0",
              "macos": "0.5.0"
            }
          }
        },
        "raster": {
          "doc": "Raster map textures such as satellite imagery.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.10.0",
              "android": "2.0.1",
              "ios": "2.0.0",
              "macos": "0.1.0"
            }
          }
        },
        "hillshade": {
          "doc": "Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.43.0",
              "android": "6.0.0",
              "ios": "4.0.0",
              "macos": "0.7.0"
            }
          }
        },
        "background": {
          "doc": "The background color or pattern of the map.",
          "sdk-support": {
            "basic functionality": {
              "js": "0.10.0",
              "android": "2.0.1",
              "ios": "2.0.0",
              "macos": "0.1.0"
            }
          }
        }
      },
      "doc": "Rendering type of this layer.",
      "required": true
    },
    "metadata": {
      "type": "*",
      "doc": "Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."
    },
    "source": {
      "type": "string",
      "doc": "Name of a source description to be used for this layer. Required for all layer types except `background`."
    },
    "source-layer": {
      "type": "string",
      "doc": "Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources."
    },
    "minzoom": {
      "type": "number",
      "minimum": 0,
      "maximum": 24,
      "doc": "The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden."
    },
    "maxzoom": {
      "type": "number",
      "minimum": 0,
      "maximum": 24,
      "doc": "The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden."
    },
    "filter": {
      "type": "filter",
      "doc": "A expression specifying conditions on source features. Only features that match the filter are displayed. The `feature-state` expression is not supported in filter expressions."
    },
    "layout": {
      "type": "layout",
      "doc": "Layout properties for the layer."
    },
    "paint": {
      "type": "paint",
      "doc": "Default paint properties for this layer."
    }
  },
  "layout": [
    "layout_fill",
    "layout_line",
    "layout_circle",
    "layout_heatmap",
    "layout_fill-extrusion",
    "layout_symbol",
    "layout_raster",
    "layout_hillshade",
    "layout_background"
  ],
  "layout_background": {
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "The layer is shown."
        },
        "none": {
          "doc": "The layer is not shown."
        }
      },
      "default": "visible",
      "doc": "Whether this layer is displayed.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        }
      },
      "property-type": "constant"
    }
  },
  "layout_fill": {
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "The layer is shown."
        },
        "none": {
          "doc": "The layer is not shown."
        }
      },
      "default": "visible",
      "doc": "Whether this layer is displayed.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        }
      },
      "property-type": "constant"
    }
  },
  "layout_circle": {
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "The layer is shown."
        },
        "none": {
          "doc": "The layer is not shown."
        }
      },
      "default": "visible",
      "doc": "Whether this layer is displayed.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        }
      },
      "property-type": "constant"
    }
  },
  "layout_heatmap": {
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "The layer is shown."
        },
        "none": {
          "doc": "The layer is not shown."
        }
      },
      "default": "visible",
      "doc": "Whether this layer is displayed.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.41.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        }
      },
      "property-type": "constant"
    }
  },
  "layout_fill-extrusion": {
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "The layer is shown."
        },
        "none": {
          "doc": "The layer is not shown."
        }
      },
      "default": "visible",
      "doc": "Whether this layer is displayed.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "property-type": "constant"
    }
  },
  "layout_line": {
    "line-cap": {
      "type": "enum",
      "values": {
        "butt": {
          "doc": "A cap with a squared-off end which is drawn to the exact endpoint of the line."
        },
        "round": {
          "doc": "A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
        },
        "square": {
          "doc": "A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
        }
      },
      "default": "butt",
      "doc": "The display of line endings.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "line-join": {
      "type": "enum",
      "values": {
        "bevel": {
          "doc": "A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
        },
        "round": {
          "doc": "A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
        },
        "miter": {
          "doc": "A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."
        }
      },
      "default": "miter",
      "doc": "The display of lines when joining.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.40.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "line-miter-limit": {
      "type": "number",
      "default": 2,
      "doc": "Used to automatically convert miter joins to bevel joins for sharp angles.",
      "requires": [
        {
          "line-join": "miter"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "line-round-limit": {
      "type": "number",
      "default": 1.05,
      "doc": "Used to automatically convert round joins to miter joins for shallow angles.",
      "requires": [
        {
          "line-join": "round"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "The layer is shown."
        },
        "none": {
          "doc": "The layer is not shown."
        }
      },
      "default": "visible",
      "doc": "Whether this layer is displayed.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "property-type": "constant"
    }
  },
  "layout_symbol": {
    "symbol-placement": {
      "type": "enum",
      "values": {
        "point": {
          "doc": "The label is placed at the point where the geometry is located."
        },
        "line": {
          "doc": "The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."
        },
        "line-center": {
          "doc": "The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."
        }
      },
      "default": "point",
      "doc": "Label placement relative to its geometry.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "`line-center` value": {
          "js": "0.47.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "symbol-spacing": {
      "type": "number",
      "default": 250,
      "minimum": 1,
      "units": "pixels",
      "doc": "Distance between two symbol anchors.",
      "requires": [
        {
          "symbol-placement": "line"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "symbol-avoid-edges": {
      "type": "boolean",
      "default": false,
      "doc": "If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-allow-overlap": {
      "type": "boolean",
      "default": false,
      "doc": "If true, the icon will be visible even if it collides with other previously drawn symbols.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-ignore-placement": {
      "type": "boolean",
      "default": false,
      "doc": "If true, other symbols can be visible even if they collide with the icon.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-optional": {
      "type": "boolean",
      "default": false,
      "doc": "If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",
      "requires": [
        "icon-image",
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-rotation-alignment": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."
        },
        "viewport": {
          "doc": "Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
        },
        "auto": {
          "doc": "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
        }
      },
      "default": "auto",
      "doc": "In combination with `symbol-placement`, determines the rotation behavior of icons.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "`auto` value": {
          "js": "0.25.0",
          "android": "4.2.0",
          "ios": "3.4.0",
          "macos": "0.3.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-size": {
      "type": "number",
      "default": 1,
      "minimum": 0,
      "units": "factor of the original icon size",
      "doc": "Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.35.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-text-fit": {
      "type": "enum",
      "values": {
        "none": {
          "doc": "The icon is displayed at its intrinsic aspect ratio."
        },
        "width": {
          "doc": "The icon is scaled in the x-dimension to fit the width of the text."
        },
        "height": {
          "doc": "The icon is scaled in the y-dimension to fit the height of the text."
        },
        "both": {
          "doc": "The icon is scaled in both x- and y-dimensions."
        }
      },
      "default": "none",
      "doc": "Scales the icon to fit around the associated text.",
      "requires": [
        "icon-image",
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.21.0",
          "android": "4.2.0",
          "ios": "3.4.0",
          "macos": "0.2.1"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-text-fit-padding": {
      "type": "array",
      "value": "number",
      "length": 4,
      "default": [
        0,
        0,
        0,
        0
      ],
      "units": "pixels",
      "doc": "Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",
      "requires": [
        "icon-image",
        "text-field",
        {
          "icon-text-fit": [
            "both",
            "width",
            "height"
          ]
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.21.0",
          "android": "4.2.0",
          "ios": "3.4.0",
          "macos": "0.2.1"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-image": {
      "type": "string",
      "doc": "Name of image in sprite to use for drawing an image background.",
      "tokens": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.35.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-rotate": {
      "type": "number",
      "default": 0,
      "period": 360,
      "units": "degrees",
      "doc": "Rotates the icon clockwise.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.21.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-padding": {
      "type": "number",
      "default": 2,
      "minimum": 0,
      "units": "pixels",
      "doc": "Size of the additional area around the icon bounding box used for detecting symbol collisions.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-keep-upright": {
      "type": "boolean",
      "default": false,
      "doc": "If true, the icon may be flipped to prevent it from being rendered upside-down.",
      "requires": [
        "icon-image",
        {
          "icon-rotation-alignment": "map"
        },
        {
          "symbol-placement": [
              "line",
              "line-center"
          ]
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-offset": {
      "type": "array",
      "value": "number",
      "length": 2,
      "default": [
        0,
        0
      ],
      "doc": "Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-anchor": {
      "type": "enum",
      "values": {
        "center": {
          "doc": "The center of the icon is placed closest to the anchor."
        },
        "left": {
          "doc": "The left side of the icon is placed closest to the anchor."
        },
        "right": {
          "doc": "The right side of the icon is placed closest to the anchor."
        },
        "top": {
          "doc": "The top of the icon is placed closest to the anchor."
        },
        "bottom": {
          "doc": "The bottom of the icon is placed closest to the anchor."
        },
        "top-left": {
          "doc": "The top left corner of the icon is placed closest to the anchor."
        },
        "top-right": {
          "doc": "The top right corner of the icon is placed closest to the anchor."
        },
        "bottom-left": {
          "doc": "The bottom left corner of the icon is placed closest to the anchor."
        },
        "bottom-right": {
          "doc": "The bottom right corner of the icon is placed closest to the anchor."
        }
      },
      "default": "center",
      "doc": "Part of the icon placed closest to the anchor.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.40.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        },
        "data-driven styling": {
          "js": "0.40.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-pitch-alignment": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "The icon is aligned to the plane of the map."
        },
        "viewport": {
          "doc": "The icon is aligned to the plane of the viewport."
        },
        "auto": {
          "doc": "Automatically matches the value of `icon-rotation-alignment`."
        }
      },
      "default": "auto",
      "doc": "Orientation of icon when map is pitched.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.39.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-pitch-alignment": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "The text is aligned to the plane of the map."
        },
        "viewport": {
          "doc": "The text is aligned to the plane of the viewport."
        },
        "auto": {
          "doc": "Automatically matches the value of `text-rotation-alignment`."
        }
      },
      "default": "auto",
      "doc": "Orientation of text when map is pitched.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.21.0",
          "android": "4.2.0",
          "ios": "3.4.0",
          "macos": "0.2.1"
        },
        "`auto` value": {
          "js": "0.25.0",
          "android": "4.2.0",
          "ios": "3.4.0",
          "macos": "0.3.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-rotation-alignment": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."
        },
        "viewport": {
          "doc": "Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
        },
        "auto": {
          "doc": "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
        }
      },
      "default": "auto",
      "doc": "In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "`auto` value": {
          "js": "0.25.0",
          "android": "4.2.0",
          "ios": "3.4.0",
          "macos": "0.3.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-field": {
      "type": "string",
      "default": "",
      "tokens": true,
      "doc": "Value to use for a text label.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-font": {
      "type": "array",
      "value": "string",
      "default": [
        "Open Sans Regular",
        "Arial Unicode MS Regular"
      ],
      "doc": "Font stack to use for displaying text.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-size": {
      "type": "number",
      "default": 16,
      "minimum": 0,
      "units": "pixels",
      "doc": "Font size.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.35.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-max-width": {
      "type": "number",
      "default": 10,
      "minimum": 0,
      "units": "ems",
      "doc": "The maximum line width for text wrapping.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.40.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-line-height": {
      "type": "number",
      "default": 1.2,
      "units": "ems",
      "doc": "Text leading value for multi-line text.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-letter-spacing": {
      "type": "number",
      "default": 0,
      "units": "ems",
      "doc": "Text tracking amount.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.40.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-justify": {
      "type": "enum",
      "values": {
        "left": {
          "doc": "The text is aligned to the left."
        },
        "center": {
          "doc": "The text is centered."
        },
        "right": {
          "doc": "The text is aligned to the right."
        }
      },
      "default": "center",
      "doc": "Text justification options.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.39.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-anchor": {
      "type": "enum",
      "values": {
        "center": {
          "doc": "The center of the text is placed closest to the anchor."
        },
        "left": {
          "doc": "The left side of the text is placed closest to the anchor."
        },
        "right": {
          "doc": "The right side of the text is placed closest to the anchor."
        },
        "top": {
          "doc": "The top of the text is placed closest to the anchor."
        },
        "bottom": {
          "doc": "The bottom of the text is placed closest to the anchor."
        },
        "top-left": {
          "doc": "The top left corner of the text is placed closest to the anchor."
        },
        "top-right": {
          "doc": "The top right corner of the text is placed closest to the anchor."
        },
        "bottom-left": {
          "doc": "The bottom left corner of the text is placed closest to the anchor."
        },
        "bottom-right": {
          "doc": "The bottom right corner of the text is placed closest to the anchor."
        }
      },
      "default": "center",
      "doc": "Part of the text placed closest to the anchor.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.39.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-max-angle": {
      "type": "number",
      "default": 45,
      "units": "degrees",
      "doc": "Maximum angle change between adjacent characters.",
      "requires": [
        "text-field",
        {
            "symbol-placement": [
                "line",
                "line-center"
            ]
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-rotate": {
      "type": "number",
      "default": 0,
      "period": 360,
      "units": "degrees",
      "doc": "顺时针旋转文本",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.35.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-padding": {
      "type": "number",
      "default": 2,
      "minimum": 0,
      "units": "pixels",
      "doc": "用于检测符号冲突的文本边界框周围的附加区域的大小。",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-keep-upright": {
      "type": "boolean",
      "default": true,
      "doc": "如果为true，则可以垂直翻转文本以防止其呈现倒置",
      "requires": [
        "text-field",
        {
          "text-rotation-alignment": "map"
        },
        {
            "symbol-placement": [
                "line",
                "line-center"
            ]
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-transform": {
      "type": "enum",
      "values": {
        "none": {
          "doc": "文本没有改变。"
        },
        "uppercase": {
          "doc": "强制所有字母以大写形式显示。"
        },
        "lowercase": {
          "doc": "强制所有字母以小写形式显示。"
        }
      },
      "default": "none",
      "doc": "指定如何大写文本，类似于CSS样式`text-transform`属性。",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-offset": {
      "type": "array",
      "doc": "文本与其锚点的偏移距离。正值表示向右和向下，而负值表示向左和向上。",
      "value": "number",
      "units": "ems",
      "length": 2,
      "default": [
        0,
        0
      ],
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.35.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature"
        ]
      },
      "property-type": "data-driven"
    },
    "text-allow-overlap": {
      "type": "boolean",
      "default": false,
      "doc": "如果为 true ，即使文本与其他先前绘制的符号发生碰撞（遮挡），文本也会可见。",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-ignore-placement": {
      "type": "boolean",
      "default": false,
      "doc": "如果是 true ，即使它们与文本冲突，其他符号也是可见的。",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-optional": {
      "type": "boolean",
      "default": false,
      "doc": "如果为 true ，当文本与其他符号发生碰撞且图标没有碰撞时，图标将显示没有相应的文本。",
      "requires": [
        "text-field",
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "显示该层。"
        },
        "none": {
          "doc": "隐藏该层。"
        }
      },
      "default": "visible",
      "doc": "是否显示该图层。",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "property-type": "constant"
    }
  },
  "layout_raster": {
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "显示该层。"
        },
        "none": {
          "doc": "隐藏该层。"
        }
      },
      "default": "visible",
      "doc": "是否显示该图层。",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "property-type": "constant"
    }
  },
  "layout_hillshade": {
    "visibility": {
      "type": "enum",
      "values": {
        "visible": {
          "doc": "显示该图层。"
        },
        "none": {
          "doc": "隐藏该图层"
        }
      },
      "default": "visible",
      "doc": "是否显示该图层",
      "sdk-support": {
        "basic functionality": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "property-type": "constant"
    }
  },
  "filter": {
    "type": "array",
    "value": "*",
    "doc": "一个过滤器从图层中选择特定要素。"
  },
  "filter_operator": {
    "type": "enum",
    "values": {
      "==": {
        "doc": "`[\"==\", key, value]` equality: `feature[key] = value`"
      },
      "!=": {
        "doc": "`[\"!=\", key, value]` inequality: `feature[key] ≠ value`"
      },
      ">": {
        "doc": "`[\">\", key, value]` greater than: `feature[key] > value`"
      },
      ">=": {
        "doc": "`[\">=\", key, value]` greater than or equal: `feature[key] ≥ value`"
      },
      "<": {
        "doc": "`[\"<\", key, value]` less than: `feature[key] < value`"
      },
      "<=": {
        "doc": "`[\"<=\", key, value]` less than or equal: `feature[key] ≤ value`"
      },
      "in": {
        "doc": "`[\"in\", key, v0, ..., vn]` set inclusion: `feature[key] ∈ {v0, ..., vn}`"
      },
      "!in": {
        "doc": "`[\"!in\", key, v0, ..., vn]` set exclusion: `feature[key] ∉ {v0, ..., vn}`"
      },
      "all": {
        "doc": "`[\"all\", f0, ..., fn]` logical `AND`: `f0 ∧ ... ∧ fn`"
      },
      "any": {
        "doc": "`[\"any\", f0, ..., fn]` logical `OR`: `f0 ∨ ... ∨ fn`"
      },
      "none": {
        "doc": "`[\"none\", f0, ..., fn]` logical `NOR`: `¬f0 ∧ ... ∧ ¬fn`"
      },
      "has": {
        "doc": "`[\"has\", key]` `feature[key]` exists"
      },
      "!has": {
        "doc": "`[\"!has\", key]` `feature[key]` does not exist"
      }
    },
    "doc": "过滤器运算符。"
  },
  "geometry_type": {
    "type": "enum",
    "values": {
      "Point": {
        "doc": "过滤到点几何。"
      },
      "LineString": {
        "doc": "过滤到线几何。"
      },
      "Polygon": {
        "doc": "过滤到多边形几何。"
      }
    },
    "doc": "要选择的过滤器的几何类型。"
  },
  "function": {
    "expression": {
      "type": "expression",
      "doc": "一个表达式。"
    },
    "stops": {
      "type": "array",
      "doc": "stops的一个数组。",
      "value": "function_stop"
    },
    "base": {
      "type": "number",
      "default": 1,
      "minimum": 0,
      "doc": "插值曲线的指数基数。它控制结果增加的速率。较高的值使结果更多地朝向范围的高端增加。对于”1“，停止是线性插值的。"
    },
    "property": {
      "type": "string",
      "doc": "函数属性的输入名类型。",
      "default": "$zoom"
    },
    "type": {
      "type": "enum",
      "values": {
        "identity": {
          "doc": "将输入值作为输出值返回。"
        },
        "exponential": {
          "doc": "通常情况下，一个通过在停止之间插入仅小于和大于函数输入来生成输出。"
        },
        "interval": {
          "doc": "返回停止的输出值，小于函数输入。"
        },
        "categorical": {
          "doc": "返回停止的输出值等于函数输入。"
        }
      },
      "doc": "用于功能评估的插值策略。",
      "default": "exponential"
    },
    "colorSpace": {
      "type": "enum",
      "values": {
        "rgb": {
          "doc": "使用RGB颜色空间插入颜色值。"
        },
        "lab": {
          "doc": "使用LBA颜色空间插入颜色值"
        },
        "hcl": {
          "doc": "针对单独插值Hue，Chroma和Luminance通道，使用HCL颜色空间来插值颜色值。"
        }
      },
      "doc": "插入颜色的颜色空间。在LAB和HCL等感知颜色空间中插入颜色往往会产生看起来更一致的颜色渐变，并且产生的颜色可以比RGB空间中插入的颜色更容易区分。",
      "default": "rgb"
    },
    "default": {
      "type": "*",
      "required": false,
      "doc": "当值不可用时，用作回调函数的值。在以下情况下使用它：1-在分类函数中，当特征值与任何停止域不匹配时 值。2-在属性和缩放和属性函数中，当一个特征不包含指定属性的值时。3-在标识函数中，当特征值对样式属性无效时（例如， 如果该函数用于`circle-color`属性，但feature属性值不是字符串或不是有效颜色）。4-在interval或exponential属性和zoom-and-property函数中，当特征值 不是数字。5-如果没有提供默认值，则在这些情况下使用样式属性的默认值。"
    }
  },
  "function_stop": {
    "type": "array",
    "minimum": 0,
    "maximum": 22,
    "value": [
      "number",
      "color"
    ],
    "length": 2,
    "doc": "缩放等级和键值对。"
  },
  "expression": {
    "type": "array",
    "value": "*",
    "minimum": 1,
    "doc": "表达式定义了一个可用于数据驱动的样式属性或特征过滤器的函数。"
  },
  "expression_name": {
    "doc": "",
    "type": "enum",
    "values": {
      "let": {
        "doc": "将表达式绑定到函数名变量，在结果表达式中使用 [\"var\", \"variable_name\"] 来进行引用。",
        "group": "Variable binding",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "var": {
        "doc": "引用变量的绑定使用 \"let\"。",
        "group": "Variable binding",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "literal": {
        "doc": "提供一个文字数组或对象值。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "array": {
        "doc": "声明输入是一个数组（可选地具有特定的项类型和长度）。如果在计算输入表达式时，它不是声明类型，那么这个声明将导致整个表达式为中止。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "at": {
        "doc": "从数组中检索项目。",
        "group": "Lookup",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "case": {
        "doc": "选择相应测试条件评估为真的第一个输出。",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "match": {
        "doc": "选择标签值与输入值匹配的输出，如果找不到匹配则选择回退值。输入可以是任何表达式（例如`[\”get \“，\”building_type \“]`） 每个标签必须是单个文字值或文字值数组（例如`\“a \”`或`[\“c \”，\“b \”]`），这些值必须是所有字符串 或者所有数字。（值“\”1 \“`和`1`不能同时是同一匹配表达式中的标签。）如果输入类型与标签的类型不匹配，则结果将是回退值。",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "coalesce": {
        "doc": "“依次计算每个表达式，直到获得第一个非空值，并返回该值。",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "step": {
        "doc": "通过评估由输入和输出值对（\”stops \“）定义的分段常量函数来产生离散的步进结果。”input“可以是任何数字表达式（例如，``\` \“，\”population \“]`）。停止输入必须是严格升序的数字文字。返回小于输入的停止输出值，如果输入小于第一个停止则返回第一个输入。",
        "group": "Ramps, scales, curves",
        "sdk-support": {
          "basic functionality": {
            "js": "0.42.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "interpolate": {
        "doc": "通过在输入和输出值对之间进行插值（\”stop \“）来产生连续、平滑的结果。”input“可以是任何数字表达式（例如，`[\”get \“，\” \“]`）。停止输入必须是严格升序的数字文字。输出类型必须是`number`，`array <number>`或`color`。插值类型：`[\ “linear \”]`：在一对止点之间线性插值，只是小于和大于输入。`[\“指数\”，基数]`：在止点之间以指数方式插值，小于和大于 “base”控制输出增加的速率：较高的值使输出增加到更高的范围。当值接近1时，输出线性增加。`[\“cubic- bezier \“，x1，y1，x2，y2]`：使用由给定控制点定义的三次贝塞尔曲线进行插值。",
        "group": "Ramps, scales, curves",
        "sdk-support": {
          "basic functionality": {
            "js": "0.42.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "ln2": {
        "doc": "返回数学常数 ln(2)。",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "pi": {
        "doc": "返回数学常数 π 。",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "e": {
        "doc": "返回数学常数 e 。",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "typeof": {
        "doc": "返回所描述给定值类型的字符串。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "string": {
        "doc": "声明输入值是一个字符串。如果提供了多个值，则按顺序计算每个值，直到获得一个字符串。如果没有输入是字符串，则表达式是错误。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "number": {
        "doc": "声明输入值是一个数字。如果提供了多个值，则按顺序计算每个值，直到获得一个数字。如果没有输入是个数字，则表达式是错误。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "boolean": {
        "doc": "声明输入值是一个布尔值。如果提供了多个值，则按顺序计算每个值，直到获得一个布尔值。如果没有输入是个布尔值，则表达式是错误。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "object": {
        "doc": "声明输入值是一个对象。如果提供了多个值，则按顺序计算每个值，直到获得一个对象。如果没有输入是个对象，则表达式是错误。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "collator": {
        "doc": "返回一个’collator‘，用于依赖于语言环境的比较操作。”case-sensitive“和”diacritic-sensitive“选项默认为“false”。‘locale’参数指定IETF语言标记。 要使用的语言环境。如果没有提供，则使用默认语言环境。如果请求的语言环境不可用，`collator`将使用系统定义的回退语言环境。使用`resolved-locale`测试语言环境回退行为的结果。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.45.0",
            "ios": "4.2.0",
            "macos": "0.9.0"
          }
        }
      },
      "to-string": {
        "doc": "将输入值转换为字符串。如果输入为”null“，则结果为”\“\”。如果输入为布尔值，则结果为“\”true \“`或` \“false \”。如果输入是一个数字，它将被转换为[\“NumberToString \”算法]指定的字符串（https://tc39.github.io/ecma262/#sec-tostring- ECMAScript语言规范的“应用于数字类型”。如果输入是一种颜色，它将被转换为“\”rgba（r，g，b，a）\“形式的字符串，其中 `r`，`g`和`b`是0到255之间的数字，`a`的范围是0到1.否则，输入将转换为[`JSON.stringify指定格式的字符串 `]（https://tc39.github.io/ecma262/#sec-json.stringify）ECMAScript语言规范的功能。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "to-number": {
        "doc": "将输入值转换为数字。如果输入为”null“或”false“，则结果为0。如果输入为”true“，则结果为1.如果输入为一个字符串，它被转换为[\“ToNumber应用于字符串类型\”算法]指定的数字（https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the- ECMAScript语言规范的字符串类型。如果提供了多个值，则按顺序计算每个值，直到获得第一次成功转换。如果没有任何输入可以转换，则表达式是错误。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "to-boolean": {
        "doc": "将输入值转换为布尔值。当输入为空字符串，0，”false“，”null“或”NaN“时，结果为”false“;否则为”true“。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "to-rgba": {
        "doc": "按顺序返回包含输入颜色的红色，绿色，蓝色和alpha分量的四元素数组。",
        "group": "Color",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "to-color": {
        "doc": "将输入值转换为颜色。如果提供了多个值，则按顺序计算每个值，直到获得第一次成功转换。如果没有任何输入可以转换，则表达式是错误。",
        "group": "Types",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "rgb": {
        "doc": "创建一个颜色值，分量红色，绿色和蓝色，其范围必须介于0到255之间，alpha组件为1.如果任何组件超出范围，则表达式是错误。",
        "group": "Color",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "rgba": {
        "doc": "创建一个颜色值，分量红色，绿色和蓝色，其范围必须介于0到255之间，alpha组件为1.如果任何组件超出范围，则表达式是错误。",
        "group": "Color",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "get": {
        "doc": "从当前要素的属性中检索属性值，如果提供了第二个参数，则从另一个对象检索属性值。如果请求的属性丢失，则返回 null。",
        "group": "Lookup",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "has": {
        "doc": "测试当前要素属性中是否存在属性值，或者如果提供了第二个参数则测试另一个对象。",
        "group": "Lookup",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "length": {
        "doc": "获取字符串数组的长度。",
        "group": "Lookup",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "properties": {
        "doc": "获得对象的特征属性。在一些实例中，直接用 [\"get\", \"property_name\"] 来得到高效的调用。",
        "group": "Feature data",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "feature-state": {
        "doc": "从当前要素的状态中检索属性值。如果要素属性不存在于要素的状态中，则返回null。要素的状态不是GeoJSON或矢量切片数据的一部分，必须在每个属性上以编程方式设置。 注意，[\“feature-state \”]只能用于支持数据驱动样式的绘图属性。",
        "group": "Feature data",
        "sdk-support": {
          "basic functionality": {
            "js": "0.46.0"
          }
        }
      },
      "geometry-type": {
        "doc": "获取要素的几何属性: Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon。",
        "group": "Feature data",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "id": {
        "doc": "如果有这个要素的话，获取其id值。",
        "group": "Feature data",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "zoom": {
        "doc": "获取当前缩放级别。请注意，在样式布局和绘画属性中，[\”zoom \“]可能只显示为顶级\”step \“或\”interpolate \“表达式的输入。",
        "group": "Zoom",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "heatmap-density": {
        "doc": "获取热图图层中像素的核密度估计值，这是对特定像素周围拥挤的数据点的相对度量。只能在“heatmap-color”属性中使用。",
        "group": "Heatmap",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "line-progress": {
        "doc": "沿着渐变线获取进度。只能在“line-gradient”属性中使用。",
        "group": "Heatmap"
      },
      "+": {
        "doc": "Returns the sum of the inputs.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "*": {
        "doc": "Returns the product of the inputs.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "-": {
        "doc": "For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "/": {
        "doc": "Returns the result of floating point division of the first input by the second.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "%": {
        "doc": "Returns the remainder after integer division of the first input by the second.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "^": {
        "doc": "Returns the result of raising the first input to the power specified by the second.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "sqrt": {
        "doc": "Returns the square root of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.42.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "log10": {
        "doc": "Returns the base-ten logarithm of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "ln": {
        "doc": "Returns the natural logarithm of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "log2": {
        "doc": "Returns the base-two logarithm of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "sin": {
        "doc": "Returns the sine of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "cos": {
        "doc": "Returns the cosine of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "tan": {
        "doc": "Returns the tangent of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "asin": {
        "doc": "Returns the arcsine of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "acos": {
        "doc": "Returns the arccosine of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "atan": {
        "doc": "Returns the arctangent of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "min": {
        "doc": "Returns the minimum value of the inputs.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "max": {
        "doc": "Returns the maximum value of the inputs.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "round": {
        "doc": "Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, `[\"round\", -1.5]` evaluates to -2.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.45.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "abs": {
        "doc": "Returns the absolute value of the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.45.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "ceil": {
        "doc": "Returns the smallest integer that is greater than or equal to the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.45.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "floor": {
        "doc": "Returns the largest integer that is less than or equal to the input.",
        "group": "Math",
        "sdk-support": {
          "basic functionality": {
            "js": "0.45.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "==": {
        "doc": "Returns `true` if the input values are equal, `false` otherwise. Equality is strictly typed: values of different types are always considered not equal. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          },
          "collator": {
            "js": "0.45.0",
            "ios": "4.2.0",
            "macos": "0.9.0"
          }
        }
      },
      "!=": {
        "doc": "Returns `true` if the input values are not equal, `false` otherwise. Equality is strictly typed: values of different types are always considered not equal. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          },
          "collator": {
            "js": "0.45.0",
            "ios": "4.2.0",
            "macos": "0.9.0"
          }
        }
      },
      ">": {
        "doc": "Returns `true` if the first input is strictly greater than the second, `false` otherwise. The inputs must be numbers or strings, and both of the same type. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          },
          "collator": {
            "js": "0.45.0",
            "ios": "4.2.0",
            "macos": "0.9.0"
          }
        }
      },
      "<": {
        "doc": "Returns `true` if the first input is strictly less than the second, `false` otherwise. The inputs must be numbers or strings, and both of the same type. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          },
          "collator": {
            "js": "0.45.0",
            "ios": "4.2.0",
            "macos": "0.9.0"
          }
        }
      },
      ">=": {
        "doc": "Returns `true` if the first input is greater than or equal to the second, `false` otherwise. The inputs must be numbers or strings, and both of the same type. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          },
          "collator": {
            "js": "0.45.0",
            "ios": "4.2.0",
            "macos": "0.9.0"
          }
        }
      },
      "<=": {
        "doc": "Returns `true` if the first input is less than or equal to the second, `false` otherwise. The inputs must be numbers or strings, and both of the same type. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          },
          "collator": {
            "js": "0.45.0",
            "ios": "4.2.0",
            "macos": "0.9.0"
          }
        }
      },
      "all": {
        "doc": "Returns `true` if all the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "any": {
        "doc": "Returns `true` if any of the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "!": {
        "doc": "Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`.",
        "group": "Decision",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "is-supported-script": {
        "doc": "Returns `true` if the input string is expected to render legibly. Returns `false` if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the `mapbox-gl-rtl-text` plugin is not in use in Mapbox GL JS).",
        "group": "String"
      },
      "upcase": {
        "doc": "Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",
        "group": "String",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "downcase": {
        "doc": "Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",
        "group": "String",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "concat": {
        "doc": "Returns a string consisting of the concatenation of the inputs.",
        "group": "String",
        "sdk-support": {
          "basic functionality": {
            "js": "0.41.0",
            "android": "6.0.0",
            "ios": "4.0.0",
            "macos": "0.7.0"
          }
        }
      },
      "resolved-locale": {
        "doc": "Returns the IETF language tag of the locale being used by the provided `collator`. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.",
        "group": "String",
        "sdk-support": {
          "basic functionality": {
            "js": "0.45.0",
            "ios": "4.2.0",
            "macos": "0.9.0"
          }
        }
      }
    }
  },
  "light": {
    "anchor": {
      "type": "enum",
      "default": "viewport",
      "values": {
        "map": {
          "doc": "The position of the light source is aligned to the rotation of the map."
        },
        "viewport": {
          "doc": "The position of the light source is aligned to the rotation of the viewport."
        }
      },
      "property-type": "data-constant",
      "transition": false,
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "doc": "Whether extruded geometries are lit relative to the map or viewport.",
      "example": "map",
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      }
    },
    "position": {
      "type": "array",
      "default": [
        1.15,
        210,
        30
      ],
      "length": 3,
      "value": "number",
      "property-type": "data-constant",
      "transition": true,
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "doc": "Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0° (0° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0°, directly above, to 180°, directly below).",
      "example": [
        1.5,
        90,
        80
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      }
    },
    "color": {
      "type": "color",
      "property-type": "data-constant",
      "default": "#ffffff",
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "transition": true,
      "doc": "Color tint for lighting extruded geometries.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      }
    },
    "intensity": {
      "type": "number",
      "property-type": "data-constant",
      "default": 0.5,
      "minimum": 0,
      "maximum": 1,
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "transition": true,
      "doc": "Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      }
    }
  },
  "paint": [
    "paint_fill",
    "paint_line",
    "paint_circle",
    "paint_heatmap",
    "paint_fill-extrusion",
    "paint_symbol",
    "paint_raster",
    "paint_hillshade",
    "paint_background"
  ],
  "paint_fill": {
    "fill-antialias": {
      "type": "boolean",
      "default": true,
      "doc": "Whether or not the fill should be antialiased.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-opacity": {
      "type": "number",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "doc": "The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.21.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-color": {
      "type": "color",
      "default": "#000000",
      "doc": "The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.",
      "transition": true,
      "requires": [
        {
          "!": "fill-pattern"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.19.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-outline-color": {
      "type": "color",
      "doc": "The outline color of the fill. Matches the value of `fill-color` if unspecified.",
      "transition": true,
      "requires": [
        {
          "!": "fill-pattern"
        },
        {
          "fill-antialias": true
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.19.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-translate": {
      "type": "array",
      "value": "number",
      "length": 2,
      "default": [
        0,
        0
      ],
      "transition": true,
      "units": "pixels",
      "doc": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-translate-anchor": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "The fill is translated relative to the map."
        },
        "viewport": {
          "doc": "The fill is translated relative to the viewport."
        }
      },
      "doc": "Controls the frame of reference for `fill-translate`.",
      "default": "map",
      "requires": [
        "fill-translate"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-pattern": {
      "type": "string",
      "transition": true,
      "doc": "Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "cross-faded"
    }
  },
  "paint_fill-extrusion": {
    "fill-extrusion-opacity": {
      "type": "number",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "doc": "The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-color": {
      "type": "color",
      "default": "#000000",
      "doc": "The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",
      "transition": true,
      "requires": [
        {
          "!": "fill-extrusion-pattern"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        },
        "data-driven styling": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-translate": {
      "type": "array",
      "value": "number",
      "length": 2,
      "default": [
        0,
        0
      ],
      "transition": true,
      "units": "pixels",
      "doc": "The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-translate-anchor": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "The fill extrusion is translated relative to the map."
        },
        "viewport": {
          "doc": "The fill extrusion is translated relative to the viewport."
        }
      },
      "doc": "Controls the frame of reference for `fill-extrusion-translate`.",
      "default": "map",
      "requires": [
        "fill-extrusion-translate"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-pattern": {
      "type": "string",
      "transition": true,
      "doc": "Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "cross-faded"
    },
    "fill-extrusion-height": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "units": "meters",
      "doc": "The height with which to extrude this layer.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        },
        "data-driven styling": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-base": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "units": "meters",
      "doc": "The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",
      "transition": true,
      "requires": [
        "fill-extrusion-height"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        },
        "data-driven styling": {
          "js": "0.27.0",
          "android": "5.1.0",
          "ios": "3.6.0",
          "macos": "0.5.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    }
  },
  "paint_line": {
    "line-opacity": {
      "type": "number",
      "doc": "The opacity at which the line will be drawn.",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "line-color": {
      "type": "color",
      "doc": "The color with which the line will be drawn.",
      "default": "#000000",
      "transition": true,
      "requires": [
        {
          "!": "line-pattern"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.23.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "line-translate": {
      "type": "array",
      "value": "number",
      "length": 2,
      "default": [
        0,
        0
      ],
      "transition": true,
      "units": "pixels",
      "doc": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "line-translate-anchor": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "The line is translated relative to the map."
        },
        "viewport": {
          "doc": "The line is translated relative to the viewport."
        }
      },
      "doc": "Controls the frame of reference for `line-translate`.",
      "default": "map",
      "requires": [
        "line-translate"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "line-width": {
      "type": "number",
      "default": 1,
      "minimum": 0,
      "transition": true,
      "units": "pixels",
      "doc": "Stroke thickness.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.39.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "line-gap-width": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "doc": "Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.",
      "transition": true,
      "units": "pixels",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "line-offset": {
      "type": "number",
      "default": 0,
      "doc": "The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",
      "transition": true,
      "units": "pixels",
      "sdk-support": {
        "basic functionality": {
          "js": "0.12.1",
          "android": "3.0.0",
          "ios": "3.1.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "line-blur": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "transition": true,
      "units": "pixels",
      "doc": "Blur applied to the line, in pixels.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "line-dasharray": {
      "type": "array",
      "value": "number",
      "doc": "Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
      "minimum": 0,
      "transition": true,
      "units": "line widths",
      "requires": [
        {
          "!": "line-pattern"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "cross-faded"
    },
    "line-pattern": {
      "type": "string",
      "transition": true,
      "doc": "Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "cross-faded"
    },
    "line-gradient": {
      "type": "color",
      "doc": "Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `\"lineMetrics\": true`.",
      "transition": false,
      "requires": [
        {
          "!": "line-dasharray"
        },
        {
          "!": "line-pattern"
        },
        {
          "source": "geojson",
          "has": {
            "lineMetrics": true
          }
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.45.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "line-progress"
        ]
      },
      "property-type": "color-ramp"
    }
  },
  "paint_circle": {
    "circle-radius": {
      "type": "number",
      "default": 5,
      "minimum": 0,
      "transition": true,
      "units": "pixels",
      "doc": "Circle radius.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.18.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "circle-color": {
      "type": "color",
      "default": "#000000",
      "doc": "The fill color of the circle.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.18.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "circle-blur": {
      "type": "number",
      "default": 0,
      "doc": "Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.20.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "circle-opacity": {
      "type": "number",
      "doc": "The opacity at which the circle will be drawn.",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.20.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "circle-translate": {
      "type": "array",
      "value": "number",
      "length": 2,
      "default": [
        0,
        0
      ],
      "transition": true,
      "units": "pixels",
      "doc": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "circle-translate-anchor": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "The circle is translated relative to the map."
        },
        "viewport": {
          "doc": "The circle is translated relative to the viewport."
        }
      },
      "doc": "Controls the frame of reference for `circle-translate`.",
      "default": "map",
      "requires": [
        "circle-translate"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "circle-pitch-scale": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "Circles are scaled according to their apparent distance to the camera."
        },
        "viewport": {
          "doc": "Circles are not scaled."
        }
      },
      "default": "map",
      "doc": "Controls the scaling behavior of the circle when the map is pitched.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.21.0",
          "android": "4.2.0",
          "ios": "3.4.0",
          "macos": "0.2.1"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "circle-pitch-alignment": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "The circle is aligned to the plane of the map."
        },
        "viewport": {
          "doc": "The circle is aligned to the plane of the viewport."
        }
      },
      "default": "viewport",
      "doc": "Orientation of circle when map is pitched.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.39.0",
          "android": "5.2.0",
          "ios": "3.7.0",
          "macos": "0.6.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "circle-stroke-width": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "transition": true,
      "units": "pixels",
      "doc": "The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        },
        "data-driven styling": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "circle-stroke-color": {
      "type": "color",
      "default": "#000000",
      "doc": "The stroke color of the circle.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        },
        "data-driven styling": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "circle-stroke-opacity": {
      "type": "number",
      "doc": "The opacity of the circle's stroke.",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        },
        "data-driven styling": {
          "js": "0.29.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    }
  },
  "paint_heatmap": {
    "heatmap-radius": {
      "type": "number",
      "default": 30,
      "minimum": 1,
      "transition": true,
      "units": "pixels",
      "doc": "Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.41.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "heatmap-weight": {
      "type": "number",
      "default": 1,
      "minimum": 0,
      "transition": false,
      "doc": "A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.41.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {
          "js": "0.41.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "heatmap-intensity": {
      "type": "number",
      "default": 1,
      "minimum": 0,
      "transition": true,
      "doc": "Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.41.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "heatmap-color": {
      "type": "color",
      "default": [
        "interpolate",
        [
          "linear"
        ],
        [
          "heatmap-density"
        ],
        0,
        "rgba(0, 0, 255, 0)",
        0.1,
        "royalblue",
        0.3,
        "cyan",
        0.5,
        "lime",
        0.7,
        "yellow",
        1,
        "red"
      ],
      "doc": "Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `[\"heatmap-density\"]` as input.",
      "transition": false,
      "sdk-support": {
        "basic functionality": {
          "js": "0.41.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "heatmap-density"
        ]
      },
      "property-type": "color-ramp"
    },
    "heatmap-opacity": {
      "type": "number",
      "doc": "The global opacity at which the heatmap layer will be drawn.",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.41.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    }
  },
  "paint_symbol": {
    "icon-opacity": {
      "doc": "The opacity at which the icon will be drawn.",
      "type": "number",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-color": {
      "type": "color",
      "default": "#000000",
      "transition": true,
      "doc": "The color of the icon. This can only be used with sdf icons.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-halo-color": {
      "type": "color",
      "default": "rgba(0, 0, 0, 0)",
      "transition": true,
      "doc": "The color of the icon's halo. Icon halos can only be used with SDF icons.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-halo-width": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "transition": true,
      "units": "pixels",
      "doc": "Distance of halo to the icon outline.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-halo-blur": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "transition": true,
      "units": "pixels",
      "doc": "Fade out the halo towards the outside.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "icon-translate": {
      "type": "array",
      "value": "number",
      "length": 2,
      "default": [
        0,
        0
      ],
      "transition": true,
      "units": "pixels",
      "doc": "Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
      "requires": [
        "icon-image"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "icon-translate-anchor": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "Icons are translated relative to the map."
        },
        "viewport": {
          "doc": "Icons are translated relative to the viewport."
        }
      },
      "doc": "Controls the frame of reference for `icon-translate`.",
      "default": "map",
      "requires": [
        "icon-image",
        "icon-translate"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-opacity": {
      "type": "number",
      "doc": "The opacity at which the text will be drawn.",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "text-color": {
      "type": "color",
      "doc": "The color with which the text will be drawn.",
      "default": "#000000",
      "transition": true,
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "text-halo-color": {
      "type": "color",
      "default": "rgba(0, 0, 0, 0)",
      "transition": true,
      "doc": "The color of the text's halo, which helps it stand out from backgrounds.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "text-halo-width": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "transition": true,
      "units": "pixels",
      "doc": "Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "text-halo-blur": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "transition": true,
      "units": "pixels",
      "doc": "The halo's fadeout distance towards the outside.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {
          "js": "0.33.0",
          "android": "5.0.0",
          "ios": "3.5.0",
          "macos": "0.4.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "text-translate": {
      "type": "array",
      "value": "number",
      "length": 2,
      "default": [
        0,
        0
      ],
      "transition": true,
      "units": "pixels",
      "doc": "Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
      "requires": [
        "text-field"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "text-translate-anchor": {
      "type": "enum",
      "values": {
        "map": {
          "doc": "The text is translated relative to the map."
        },
        "viewport": {
          "doc": "The text is translated relative to the viewport."
        }
      },
      "doc": "Controls the frame of reference for `text-translate`.",
      "default": "map",
      "requires": [
        "text-field",
        "text-translate"
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    }
  },
  "paint_raster": {
    "raster-opacity": {
      "type": "number",
      "doc": "The opacity at which the image will be drawn.",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "raster-hue-rotate": {
      "type": "number",
      "default": 0,
      "period": 360,
      "transition": true,
      "units": "degrees",
      "doc": "Rotates hues around the color wheel.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "raster-brightness-min": {
      "type": "number",
      "doc": "Increase or reduce the brightness of the image. The value is the minimum brightness.",
      "default": 0,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "raster-brightness-max": {
      "type": "number",
      "doc": "Increase or reduce the brightness of the image. The value is the maximum brightness.",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "raster-saturation": {
      "type": "number",
      "doc": "Increase or reduce the saturation of the image.",
      "default": 0,
      "minimum": -1,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "raster-contrast": {
      "type": "number",
      "doc": "Increase or reduce the contrast of the image.",
      "default": 0,
      "minimum": -1,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "raster-resampling": {
      "type": "enum",
      "doc": "The resampling/interpolation method to use for overscaling, also known as texture magnification filter",
      "values": {
        "linear": {
          "doc": "(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"
        },
        "nearest": {
          "doc": "Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"
        }
      },
      "default": "linear",
      "sdk-support": {
        "basic functionality": {
          "js": "0.47.0",
          "android": "6.3.0",
          "ios": "4.2.0",
          "macos": "0.9.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "raster-fade-duration": {
      "type": "number",
      "default": 300,
      "minimum": 0,
      "transition": false,
      "units": "milliseconds",
      "doc": "Fade duration when a new tile is added.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    }
  },
  "paint_hillshade": {
    "hillshade-illumination-direction": {
      "type": "number",
      "default": 335,
      "minimum": 0,
      "maximum": 359,
      "doc": "The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.",
      "transition": false,
      "sdk-support": {
        "basic functionality": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "hillshade-illumination-anchor": {
      "type": "enum",
      "values": {
        "map": {
            "doc": "The hillshade illumination is relative to the north direction."
        },
        "viewport": {
            "doc": "The hillshade illumination is relative to the top of the viewport."
        }
      },
      "default": "viewport",
      "doc": "Direction of light source when map is rotated.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "hillshade-exaggeration": {
      "type": "number",
      "doc": "Intensity of the hillshade",
      "default": 0.5,
      "minimum": 0,
      "maximum": 1,
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "hillshade-shadow-color": {
      "type": "color",
      "default": "#000000",
      "doc": "The shading color of areas that face away from the light source.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "hillshade-highlight-color": {
      "type": "color",
      "default": "#FFFFFF",
      "doc": "The shading color of areas that faces towards the light source.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "hillshade-accent-color": {
      "type": "color",
      "default": "#000000",
      "doc": "The shading color used to accentuate rugged terrain like sharp cliffs and gorges.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.43.0",
          "android": "6.0.0",
          "ios": "4.0.0",
          "macos": "0.7.0"
        },
        "data-driven styling": {}
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    }
  },
  "paint_background": {
    "background-color": {
      "type": "color",
      "default": "#000000",
      "doc": "The color with which the background will be drawn.",
      "transition": true,
      "requires": [
        {
          "!": "background-pattern"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "background-pattern": {
      "type": "string",
      "transition": true,
      "doc": "Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        }
      },
      "expression": {
        "interpolated": false,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "cross-faded"
    },
    "background-opacity": {
      "type": "number",
      "default": 1,
      "minimum": 0,
      "maximum": 1,
      "doc": "The opacity at which the background will be drawn.",
      "transition": true,
      "sdk-support": {
        "basic functionality": {
          "js": "0.10.0",
          "android": "2.0.1",
          "ios": "2.0.0",
          "macos": "0.1.0"
        }
      },
      "expression": {
        "interpolated": true,
        "parameters": [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    }
  },
  "transition": {
    "duration": {
      "type": "number",
      "default": 300,
      "minimum": 0,
      "units": "milliseconds",
      "doc": "Time allotted for transitions to complete."
    },
    "delay": {
      "type": "number",
      "default": 0,
      "minimum": 0,
      "units": "milliseconds",
      "doc": "Length of time before a transition begins."
    }
  },
  "property-type": {
    "data-driven": {
      "type": "property-type",
      "doc": "Property is interpolable and can be represented using a property expression."
    },
    "cross-faded": {
      "type": "property-type",
      "doc": "Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms."
    },
    "cross-faded-data-driven": {
      "type": "property-type",
      "doc": "Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms. It can be represented using a property expression."
    },
    "color-ramp": {
      "type": "property-type",
      "doc": "Property should be specified using a color ramp from which the output color can be sampled based on a property calculation."
    },
    "data-constant": {
      "type": "property-type",
      "doc": "Property is interpolable but cannot be represented using a property expression."
    },
    "constant": {
      "type": "property-type",
      "doc": "Property is constant across all zoom levels and property values."
    }
  }
}
